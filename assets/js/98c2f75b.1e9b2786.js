"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[260],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:i,s[1]=r;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={slug:"/reactjs/state",title:"React state",description:"Learn how to effectively use React state to manage and update component data. Explore examples of functional components with hooks and class components. Understand the concepts of rendering, re-rendering, and best practices for optimizing React state.",sidebar_label:"State",sidebar_position:1,keywords:["React state","managing component data","functional components with hooks","class components","rendering","re-rendering","React state examples","React state best practices","optimizing React state."]},s=void 0,r={unversionedId:"Reactjs/state",id:"Reactjs/state",title:"React state",description:"Learn how to effectively use React state to manage and update component data. Explore examples of functional components with hooks and class components. Understand the concepts of rendering, re-rendering, and best practices for optimizing React state.",source:"@site/docs/Reactjs/state.mdx",sourceDirName:"Reactjs",slug:"/reactjs/state",permalink:"/Notes/reactjs/state",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/reactjs/state",title:"React state",description:"Learn how to effectively use React state to manage and update component data. Explore examples of functional components with hooks and class components. Understand the concepts of rendering, re-rendering, and best practices for optimizing React state.",sidebar_label:"State",sidebar_position:1,keywords:["React state","managing component data","functional components with hooks","class components","rendering","re-rendering","React state examples","React state best practices","optimizing React state."]},sidebar:"tutorialSidebar",previous:{title:"storybook",permalink:"/Notes/React Library/storybook"},next:{title:"useEffect",permalink:"/Notes/reactjs/useEffect"}},l={},c=[{value:"Using State in React:",id:"using-state-in-react",level:2},{value:"Initializing State:",id:"initializing-state",level:3},{value:"Declaring State:",id:"declaring-state",level:3},{value:"Accessing State:",id:"accessing-state",level:3},{value:"Updating State:",id:"updating-state",level:3},{value:"Rendering and Re-rendering:",id:"rendering-and-re-rendering",level:3},{value:"Example (Functional Component with Hooks):",id:"example-functional-component-with-hooks",level:2},{value:"Example (Class Component):",id:"example-class-component",level:2},{value:"Additional Suggestions and Best Practices:",id:"additional-suggestions-and-best-practices",level:2},{value:"Use Multiple State Variables:",id:"use-multiple-state-variables",level:3},{value:"Minimize State Usage:",id:"minimize-state-usage",level:3},{value:"Avoid Excessive Nesting of Components:",id:"avoid-excessive-nesting-of-components",level:3},{value:"Follow the Principle of Immutability:",id:"follow-the-principle-of-immutability",level:3},{value:"Use Controlled Components for Form Inputs:",id:"use-controlled-components-for-form-inputs",level:3},{value:"Use Callbacks for Complex State Updates:",id:"use-callbacks-for-complex-state-updates",level:3},{value:"Use DevTools for Debugging:",id:"use-devtools-for-debugging",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"State is a JavaScript object that stores and manages data within a React component."),(0,i.kt)("li",{parentName:"ul"},"It represents the internal state of a component and can be changed over time."),(0,i.kt)("li",{parentName:"ul"},"State allows components to have dynamic behavior and updates the UI in response to changes.")),(0,i.kt)("h2",{id:"using-state-in-react"},"Using State in React:"),(0,i.kt)("h3",{id:"initializing-state"},"Initializing State:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In functional components, the ",(0,i.kt)("inlineCode",{parentName:"li"},"useState")," hook is used to initialize state."),(0,i.kt)("li",{parentName:"ul"},"In class components, state is initialized in the constructor using ",(0,i.kt)("inlineCode",{parentName:"li"},"this.state"),".")),(0,i.kt)("h3",{id:"declaring-state"},"Declaring State:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In class components, State is typically declared as a JavaScript object with key-value pairs. Each key represents a specific aspect of the component's data."),(0,i.kt)("li",{parentName:"ul"},"In functional components with hooks, the useState hook can be used to manage state by providing an initial value, which can be of any data type.")),(0,i.kt)("h3",{id:"accessing-state"},"Accessing State:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"State values can be accessed within the component using the state variable."),(0,i.kt)("li",{parentName:"ul"},"In functional components, the state variable and its associated setter function are returned by the ",(0,i.kt)("inlineCode",{parentName:"li"},"useState")," hook."),(0,i.kt)("li",{parentName:"ul"},"In class components, use ",(0,i.kt)("inlineCode",{parentName:"li"},"this.state.<stateKey>")," to access a specific state value.")),(0,i.kt)("h3",{id:"updating-state"},"Updating State:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"State should never be modified directly. Instead, use the setter function provided by React."),(0,i.kt)("li",{parentName:"ul"},"In functional components, use the setter function obtained from ",(0,i.kt)("inlineCode",{parentName:"li"},"useState")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"set<stateKey>(<newValue>)"),") to update state."),(0,i.kt)("li",{parentName:"ul"},"In class components, use ",(0,i.kt)("inlineCode",{parentName:"li"},"this.setState({ <stateKey>: <newValue> })")," to update a specific state value.")),(0,i.kt)("h3",{id:"rendering-and-re-rendering"},"Rendering and Re-rendering:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When a component is initially rendered, React evaluates the component's JSX and generates a virtual representation of the DOM elements."),(0,i.kt)("li",{parentName:"ul"},"Re-rendering occurs when there are changes to the component's state or props."),(0,i.kt)("li",{parentName:"ul"},'React performs a process called "diffing" to identify differences between the previous and new virtual DOM representation.'),(0,i.kt)("li",{parentName:"ul"},"It then updates only the affected parts of the actual DOM, minimizing the number of real DOM manipulations.")),(0,i.kt)("h2",{id:"example-functional-component-with-hooks"},"Example (Functional Component with Hooks):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useState } from "react";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n')),(0,i.kt)("h2",{id:"example-class-component"},"Example (Class Component):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { Component } from "react";\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n    };\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n')),(0,i.kt)("p",null,"In both examples, the ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," state variable is initialized with a value of 0.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"increment")," function/method updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," state by incrementing its value.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," value is rendered within the JSX using ",(0,i.kt)("inlineCode",{parentName:"p"},"{count}"),'.\nClicking the "Increment" button triggers a state update, resulting in a re-render of the component.'),(0,i.kt)("h2",{id:"additional-suggestions-and-best-practices"},"Additional Suggestions and Best Practices:"),(0,i.kt)("h3",{id:"use-multiple-state-variables"},"Use Multiple State Variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Instead of storing all the component's state in a single object, consider using multiple state variables for better clarity and granularity."),(0,i.kt)("li",{parentName:"ul"},"Splitting state into smaller pieces makes it easier to manage and reason about.")),(0,i.kt)("h3",{id:"minimize-state-usage"},"Minimize State Usage:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Only use state when necessary. If a value doesn't change over time or doesn't affect the component's UI, consider using props or local variables instead."),(0,i.kt)("li",{parentName:"ul"},"Unnecessary state can introduce complexity and reduce performance.")),(0,i.kt)("h3",{id:"avoid-excessive-nesting-of-components"},"Avoid Excessive Nesting of Components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When lifting state up to a parent component, be mindful of the component hierarchy."),(0,i.kt)("li",{parentName:"ul"},"Avoid excessive nesting of components to prevent prop drilling, where props need to be passed through many layers."),(0,i.kt)("li",{parentName:"ul"},"Instead, use context or state management libraries (e.g., Redux) for sharing state across components that are not directly related.")),(0,i.kt)("h3",{id:"follow-the-principle-of-immutability"},"Follow the Principle of Immutability:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When updating state, always create a new object or array instead of modifying the existing state directly."),(0,i.kt)("li",{parentName:"ul"},"This ensures that state changes are detected correctly by React and helps prevent unintentional side effects.")),(0,i.kt)("h3",{id:"use-controlled-components-for-form-inputs"},"Use Controlled Components for Form Inputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For form inputs, follow the controlled component pattern, where the component's state controls the value of the input field."),(0,i.kt)("li",{parentName:"ul"},"Handle the ",(0,i.kt)("inlineCode",{parentName:"li"},"onChange")," event to update the state and reflect the user's input accurately.")),(0,i.kt)("h3",{id:"use-callbacks-for-complex-state-updates"},"Use Callbacks for Complex State Updates:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When updating state based on the previous state or performing multiple state updates in sequence, use the callback form of ",(0,i.kt)("inlineCode",{parentName:"p"},"setState")," to ensure data consistency.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The callback function receives the previous state as an argument, ensuring accurate and reliable state updates."))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Using callbacks for complex state updates"),"Using callbacks for complex state updates in React is a recommended practice when you need to update state based on the previous state or when you have multiple state updates that need to occur in sequence.",(0,i.kt)("p",null,"In React, state updates may be asynchronous, meaning that multiple state updates may be batched together for performance reasons. If you rely on the current state value to calculate the next state, there's a possibility of stale or incorrect data. To ensure accurate and reliable state updates, you can use a callback form of the state setter function."),(0,i.kt)("p",null,"Here's an example to illustrate the use of callbacks for complex state updates:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useState } from "react";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const incrementTwiceNonCallback = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n  };\n\n  const incrementTwiceWithCallback = () => {\n    setCount((prevCount) => prevCount + 1);\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={incrementTwiceNonCallback}>\n        Increment Twice (Non-callback)\n      </button>\n      <button onClick={incrementTwiceWithCallback}>\n        Increment Twice (Callback)\n      </button>\n    </div>\n  );\n}\n')),(0,i.kt)("p",null,"In this updated code, we have two functions: ",(0,i.kt)("inlineCode",{parentName:"p"},"incrementTwiceNonCallback")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"incrementTwiceWithCallback"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"incrementTwiceNonCallback"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This function performs state updates without using callbacks."),(0,i.kt)("li",{parentName:"ul"},"It calls ",(0,i.kt)("inlineCode",{parentName:"li"},"setCount(count + 1)")," twice directly, using the current ",(0,i.kt)("inlineCode",{parentName:"li"},"count")," value."),(0,i.kt)("li",{parentName:"ul"},"This approach may lead to unexpected results, such as incrementing the count by one instead of two. since the state updates are not guaranteed to be synchronous and based on the latest state."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"incrementTwiceWithCallback"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This function performs state updates using callbacks."),(0,i.kt)("li",{parentName:"ul"},"It calls ",(0,i.kt)("inlineCode",{parentName:"li"},"setCount((prevCount) => prevCount + 1)")," twice, passing a callback function that receives the previous state as an argument."),(0,i.kt)("li",{parentName:"ul"},"By using callbacks, we ensure that the state updates are based on the latest state and are processed correctly, regardless of any asynchronous behavior.")))),(0,i.kt)("p",null,"Using callbacks for state updates in React helps maintain data integrity, prevents unexpected behavior, and ensures that complex state updates are handled accurately, even in asynchronous scenarios.")),(0,i.kt)("h3",{id:"use-devtools-for-debugging"},"Use DevTools for Debugging:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Utilize browser extensions or React DevTools to inspect component state, track state changes, and debug issues related to state updates.")),(0,i.kt)("p",null,"Remember to consider performance optimizations and use techniques like shouldComponentUpdate, React.memo, and efficient state management to minimize unnecessary re-renders and enhance the performance of your React applications."))}d.isMDXComponent=!0}}]);